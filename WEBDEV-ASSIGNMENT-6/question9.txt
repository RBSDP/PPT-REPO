In JavaScript, a class is a blueprint or template for creating objects with predefined properties and methods. It is a syntactical sugar over the existing prototype-based inheritance model of JavaScript, introduced in ECMAScript 2015 (ES6). Classes provide a more familiar and structured syntax for creating objects and defining their behaviors.

Here's an example of defining a class in JavaScript:

```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}
```

In this example:

- The `class` keyword is used to define a new class named `Person`.
- The `constructor` method is a special method that is automatically called when an object is created from the class. It is used for initializing the object's properties.
- Inside the constructor, we define the properties `name` and `age`, which will be assigned when a new object is created.
- The `greet` method is defined within the class, which can be called on objects created from the class. It logs a greeting message to the console, using the object's `name` and `age` properties.

To create an object from the class, you use the `new` keyword:

```javascript
const person = new Person("John", 30);
```

In this example, a new `Person` object is created with the name "John" and age 30.

Once an object is created from a class, you can access its properties and call its methods using the dot notation:

```javascript
console.log(person.name); // Outputs: John
person.greet(); // Outputs: Hello, my name is John and I am 30 years old.
```

JavaScript classes also support inheritance, where you can create subclasses that inherit properties and methods from a superclass. The `extends` keyword is used to establish the inheritance relationship between classes.

Here's an example of class inheritance in JavaScript:

```javascript
class Student extends Person {
  constructor(name, age, grade) {
    super(name, age);
    this.grade = grade;
  }

  study() {
    console.log(`${this.name} is studying hard for grade ${this.grade}.`);
  }
}
```

In this example, the `Student` class extends the `Person` class. It inherits the `name`, `age`, and `greet` method from the `Person` class, and adds its own `grade` property and `study` method.

JavaScript classes provide a more intuitive and structured syntax for creating objects and defining their behaviors. They help organize code, promote reusability, and make object-oriented programming concepts more accessible in JavaScript.