In React, a component is a self-contained, reusable piece of code that encapsulates the UI logic and functionality. Components are the building blocks of a React application and can be composed together to create complex user interfaces.

There are two types of components in React:

1. Functional Components:
   - Also known as stateless functional components.
   - Written as JavaScript functions that return JSX (JavaScript XML) to describe the component's UI.
   - Suitable for simple components that don't need to maintain their own state or lifecycle methods.
   - Example:
     ```javascript
     import React from 'react';

     const FunctionalComponent = () => {
       return <div>Hello, I'm a functional component!</div>;
     };

     export default FunctionalComponent;
     ```

2. Class Components:
   - Also known as stateful components.
   - Written as JavaScript classes that extend the `React.Component` base class.
   - Have their own state, lifecycle methods, and can handle user interactions.
   - Suitable for more complex components that require state management or lifecycle methods.
   - Example:
     ```javascript
     import React, { Component } from 'react';

     class ClassComponent extends Component {
       constructor(props) {
         super(props);
         this.state = {
           message: 'Hello, I am a class component!',
         };
       }

       render() {
         return <div>{this.state.message}</div>;
       }
     }

     export default ClassComponent;
     ```

React components can accept inputs, known as `props`, which are passed as attributes when using the component. Props allow components to be flexible and customizable.

For example, a component that displays a user's name could be used as follows:

```jsx
<UserName name="John Doe" />
```

Components are the building blocks of React applications, and they promote modularity, reusability, and maintainability. By breaking down UI into smaller components, developers can easily manage and organize their code, making it more efficient to develop and maintain complex applications.